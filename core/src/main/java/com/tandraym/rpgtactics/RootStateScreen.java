package com.tandraym.rpgtactics;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.maps.MapProperties;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.utils.viewport.FitViewport;

public class RootStateScreen implements Screen {

    private final SpriteBatch batch = new SpriteBatch();
    private final BitmapFont font = new BitmapFont();   // —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç LibGDX
    private OrthographicCamera camera;
    private FitViewport viewport;
    private OrthogonalTiledMapRenderer mapRenderer;
    private boolean mapInit = false;                      // —á—Ç–æ–±—ã –æ–¥–∏–Ω —Ä–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É
    private GameState state;
    private final MainGame game;
    TiledMapTileLayer collLayer;
    ShapeRenderer debugRenderer;
// –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞


    private static final float VIEW_W = 20f;   // —à–∏—Ä–∏–Ω–∞ –≤ —Ç–∞–π–ª–∞—Ö
    private static final float VIEW_H = 12f;   // –≤—ã—Å–æ—Ç–∞
    private static final float TILE_SIZE = 1f;


    private float worldW, worldH;   // —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∏—Ä–∞
    private float targetX, targetY;


    //float aspect = (float)Gdx.graphics.getWidth() / Gdx.graphics.getHeight();
    //float VIEW_W = 20f;
    //float VIEW_H = VIEW_W / aspect;


    public RootStateScreen(MainGame game) {
        this.game = game;
        this.state = GameState.BOOT;
    }

    @Override
    public void show() {

    }

    @Override
    public void render(float delta) {
        //    Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        //    camera.update();
        //    batch.setProjectionMatrix(camera.combined);
        //    batch.begin();
        //    // draw stuff
        //    batch.end();

        ScreenUtils.clear(0.12f, 0.12f, 0.15f, 1f);

        /* ---- BOOT ------------------------------------------------------ */
        if (state == GameState.BOOT) {
            AssetManager am = game.getGameServices().assets();

            if (am.update()) {
                Gdx.app.log("EXPLORE", "rendering explore");
                state = GameState.EXPLORE;
            }

            float pct = am.getProgress() * 100f;
            batch.begin();
            font.draw(batch, "Loading " + (int) (pct) + "%", 20, 40);
            batch.end();
            return;
        }

        /* ---- EXPLORE (init once) --------------------------------------- */
        if (!mapInit) {
            initExplore();
            mapInit = true;
        }
        updateExplore(delta);
    }

    @Override
    public void resize(int width, int height) {
        if (viewport != null) viewport.update(width, height, true);
    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void hide() {

    }

    /* ------------------------------------------------------------------- */
    @Override
    public void dispose() {
        batch.dispose();
        font.dispose();
        debugRenderer.dispose();
        if (mapRenderer != null) mapRenderer.dispose();
    }

    private void clear(float r, float g, float b) {
        Gdx.gl.glClearColor(r, g, b, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    }

    private void initExplore() {
        debugRenderer = new ShapeRenderer();
        TiledMap map = game.getGameServices().assets().get("maps/home_map.tmx", TiledMap.class);
        mapRenderer = new OrthogonalTiledMapRenderer(map, 1f / 16f);
        camera = new OrthographicCamera();
        viewport = new FitViewport(VIEW_W, VIEW_H, camera);

        viewport.apply();
        camera.position.set(10, 6, 0); // —Ü–µ–Ω—Ç—Ä –∫–∞–º–µ—Ä—ã (–ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç 20x12)
        camera.update();

        // –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –≤ —Ç–∞–π–ª–∞—Ö
        MapProperties prop = map.getProperties();
        int tilesX = prop.get("width", Integer.class);   // –∏–∑ .tmx <map width="‚Ä¶">
        int tilesY = prop.get("height", Integer.class);

// –®–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞ –º–∏—Ä–∞ –≤ ¬´—é–Ω–∏—Ç–∞—Ö¬ª (—É –Ω–∞—Å 1 —é–Ω–∏—Ç = 1 —Ç–∞–π–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ unitScale = 1/16f)
        worldW = tilesX * TILE_SIZE;    // TILE_SIZE = 1f
        worldH = tilesY * TILE_SIZE;

        targetX = camera.position.x = worldW / 2f;
        targetY = camera.position.y = worldH / 2f;

        collLayer = (TiledMapTileLayer) map.getLayers().get("collision");


    }

    private void updateExplore(float delta) {

        //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ WASD, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–ª–∏–∑–∏—é.
        updateCameraTarget(delta);
        //–ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫–∞–º–µ—Ä—É –∫ —Ü–µ–ª–∏ (targetX/Y).
        lerpCamera();
        renderCollisionDebug();

        mapRenderer.setView(camera);     // ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É
        // ‚Äî —Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç—É.
        mapRenderer.render();
    }

    //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
    //–Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à
    //—Ä–∞—Å—á—ë—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    //–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ä—Ç—ã
    //–ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ª–ª–∏–∑–∏–∏ —á–µ—Ä–µ–∑ isWalkable
    //üí° –¢—É—Ç –∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–∫–∞–∑ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–ª–µ—Ç–∫–∞ –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–∞.
    private void updateCameraTarget(float delta) {
        handleMovementInput(delta);
        clampCameraTarget();
        blockTargetIfCollision();
    }

    private void handleMovementInput(float delta) {
        // –®–∞–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (—Å–∫–æ—Ä–æ—Å—Ç—å) –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–¥—Ä–∞ ‚Äî —ç—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –ª—é–±–æ–º FPS
        //üí° –°–º—ã—Å–ª:
        //–¢—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–∞–º–µ—Ä–∞ –∏–ª–∏ —Ü–µ–ª—å –∫–∞–º–µ—Ä—ã) –¥–≤–∏–≥–∞–ª—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 10 —Ç–∞–π–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É,
        // –ù–ï –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç FPS. –ò–º–µ–Ω–Ω–æ —ç—Ç–æ –∏ –¥–µ–ª–∞–µ—Ç —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ delta.
        //‚è± –ß—Ç–æ —Ç–∞–∫–æ–µ delta?
        //delta ‚Äî —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥:
        //float delta = Gdx.graphics.getDeltaTime();
        float speed = 10f * delta;

        //üß† –ß–¢–û –¢–ê–ö–û–ï Gdx?
        //Gdx ‚Äî —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π "–º–æ—Å—Ç" (Facade) –∫–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞–º LibGDX.
        Input in = game.getGameServices().input();

        if (in.isKeyPressed(Input.Keys.A) || in.isKeyPressed(Input.Keys.LEFT)) targetX -= speed;
        if (in.isKeyPressed(Input.Keys.D) || in.isKeyPressed(Input.Keys.RIGHT)) targetX += speed;
        if (in.isKeyPressed(Input.Keys.W) || in.isKeyPressed(Input.Keys.UP)) targetY += speed;
        if (in.isKeyPressed(Input.Keys.S) || in.isKeyPressed(Input.Keys.DOWN)) targetY -= speed;
    }

    private void clampCameraTarget() {
// –®–∏—Ä–∏–Ω–∞* –∏ –≤—ã—Å–æ—Ç–∞* ¬´–≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏¬ª (–≤ –º–∏—Ä–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö) ‚Äî‚Äî
// —ç—Ç–æ —Ç–µ —Å–∞–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ FitViewport,
// –Ω–∞–ø—Ä–∏–º–µ—Ä 20¬†√ó¬†12 —Ç–∞–π–ª–æ–≤.
//
// getWorldWidth()/getWorldHeight() –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∏—Ö —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è.
// –î–µ–ª–∏–º –Ω–∞¬†2, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **¬´–ø–æ–ª—É‚Äë—Ä–∞–∑–º–µ—Ä—ã¬ª** –∫–∞–º–µ—Ä—ã.
//
// *–ü–æ—á–µ–º—É ¬´–≤ –º–∏—Ä–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö¬ª, –∞ –Ω–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö?
//   –ú—ã –∑–∞—Ä–∞–Ω–µ–µ —Ä–µ—à–∏–ª–∏, —á—Ç–æ 1¬†–µ–¥–∏–Ω–∏—Ü–∞ –º–∏—Ä–∞¬†= 1¬†—Ç–∞–π–ª (16‚ÄØ√ó‚ÄØ16¬†px),
//   –ø–æ—ç—Ç–æ–º—É –∫–∞–º–µ—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–º 20¬†√ó¬†12 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–≤–Ω–æ 20¬†√ó¬†12¬†—Ç–∞–π–ª–æ–≤.
//   –ü–∏–∫—Å–µ–ª–∏ –Ω–∞—Å —Ç—É—Ç –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç.
        float halfW = viewport.getWorldWidth() / 2f;   // –ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –∫–∞–º–µ—Ä—ã
        float halfH = viewport.getWorldHeight() / 2f;   // –ø–æ–ª–æ–≤–∏–Ω–∞ –≤—ã—Å–æ—Ç—ã –∫–∞–º–µ—Ä—ã


        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º (clamp) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ¬´—Ü–µ–Ω—Ç—Ä–∞ –∫–∞–º–µ—Ä—ã¬ª —Ç–∞–∫, —á—Ç–æ–±—ã
// –æ–Ω–∞ –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –Ω–µ –≤—ã—à–ª–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞—Ä—Ç—ã.

// 1)  targetX = MathUtils.clamp(
//         targetX,                // —Ç–µ–∫—É—â–µ–µ –∂–µ–ª–∞–µ–º–æ–µ X‚Äë–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞
//         halfW,                  // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: –ª–µ–≤—ã–π –∫—Ä–∞–π = 0
//         worldW - halfW);        // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π = worldW
//
// 2)  targetY = MathUtils.clamp(
//         targetY,                // —Ç–µ–∫—É—â–µ–µ –∂–µ–ª–∞–µ–º–æ–µ Y‚Äë–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞
//         halfH,                  // –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã
//         worldH - halfH);        // –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã

        //–ß—Ç–æ –¥–µ–ª–∞–µ—Ç MathUtils.clamp(value, min, max)?
        //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç value, –æ–≥—Ä–∞–Ω–∏—á–∏–≤ –µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [min,¬†max]:
        //
        //–ï—Å–ª–∏ value < min¬†‚Üí –≤–µ—Ä–Ω—ë—Ç min.
        //
        //–ï—Å–ª–∏ value > max¬†‚Üí –≤–µ—Ä–Ω—ë—Ç max.
        //
        //–ò–Ω–∞—á–µ –≤–µ—Ä–Ω—ë—Ç —Å–∞–º value.
        targetX = MathUtils.clamp(targetX, halfW, worldW - halfW);
        targetY = MathUtils.clamp(targetY, halfH, worldH - halfH);

    }

    private void blockTargetIfCollision() {
        // clamp target –ø–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è targetX/targetY
        //–ü–æ–∫–∞ —ç—Ç–æ –≥—Ä—É–±—ã–π –ø—Ä–∏–º–µ—Ä. –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
        int cellX = MathUtils.floor(targetX);
        int cellY = MathUtils.floor(targetY);
        if (isWalkable(cellX, cellY)) {
            // –æ—Ç–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É
            targetX = camera.position.x;
            targetY = camera.position.y;
        }
    }


    //–ü–ª–∞–≤–Ω–æ –¥–≤–∏–≥–∞–µ—Ç –∫–∞–º–µ—Ä—É –∫ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–µ (targetX/Y), –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã.
    private void lerpCamera() {
        camera.position.x += (targetX - camera.position.x) * 0.12f; //0.12f¬†‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (12‚ÄØ% —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∑–∞ –∫–∞–¥—Ä). –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∫—É—Å.
        camera.position.y += (targetY - camera.position.y) * 0.12f;
        camera.update();                 // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    }

    //2.5‚Äë2 –§—É–Ω–∫—Ü–∏—è ¬´–ø—Ä–æ—Ö–æ–¥–∏–º–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞¬ª
    //–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞ –Ω–∞ collision-—Å–ª–æ–µ ‚Üí –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Ö–æ–¥–∏–º–∞.
    private boolean isWalkable(int x, int y) {
        // –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        if (x < 0 || y < 0 || x >= collLayer.getWidth() || y >= collLayer.getHeight())
            return true;

        // –≤ collision‚Äë—Å–ª–æ–µ –Ω–µ–ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ = —Å—Ç–µ–Ω–∞
        return collLayer.getCell(x, y) != null;
    }

    //–®–∞–≥ v2.5‚Äë 4 –í—ã–≤–æ–¥ –¥–µ–±–∞–≥‚Äë–º–∞—Å–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    // debug-–º–∞—Å–∫–∞, —Ä–∏—Å—É—é—â–∞—è –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã–µ –∫–ª–µ—Ç–∫–∏ (ShapeRenderer).
    private void renderCollisionDebug() {
        debugRenderer.setProjectionMatrix(camera.combined);
        debugRenderer.begin(ShapeRenderer.ShapeType.Line);
        for (int x = 0; x < collLayer.getWidth(); x++) {
            for (int y = 0; y < collLayer.getHeight(); y++) {
                if (isWalkable(x, y))
                    debugRenderer.rect(x, y, 1, 1);
            }
        }
        debugRenderer.end();
    }
}
